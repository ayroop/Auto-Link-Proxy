name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [7.4, 8.0, 8.1, 8.2]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: curl, mbstring, openssl
        coverage: xdebug
    
    - name: Validate composer.json
      run: composer validate --strict
      if: hashFiles('composer.json') != ''
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress
      if: hashFiles('composer.json') != ''
    
    - name: Run PHP syntax check
      run: |
        find . -name "*.php" -not -path "./vendor/*" -not -path "./node_modules/*" -exec php -l {} \;
    
    - name: Run PHP CodeSniffer
      run: |
        composer require --dev squizlabs/php_codesniffer
        ./vendor/bin/phpcs --standard=PSR12 --extensions=php .
      if: hashFiles('composer.json') != ''
    
    - name: Security check
      run: |
        composer require --dev enlightn/security-checker
        ./vendor/bin/security-checker security:check composer.lock
      if: hashFiles('composer.json') != ''

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check markdown files
      uses: DavidAnson/markdownlint-cli2-action@v11
      with:
        globs: "**/*.md"
    
    - name: Check for broken links
      run: |
        npm install -g markdown-link-check
        find . -name "*.md" -exec markdown-link-check {} \;

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create release archive
      run: |
        mkdir -p dist
        tar -czf dist/auto-link-proxy-v1.0.0.tar.gz \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='node_modules' \
          --exclude='vendor' \
          --exclude='*.log' \
          --exclude='.DS_Store' \
          .
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: auto-link-proxy-build
        path: dist/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: auto-link-proxy-build
        path: dist/
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Auto Link Proxy Release v${{ github.run_number }}
          
          ## Changes
          - Automated release from CI/CD pipeline
          - All tests passed
          - Code quality checks completed
          
          ## Installation
          1. Download the release archive
          2. Extract to your web server
          3. Configure settings in config.php
          4. Test the proxy functionality
          
          ## Support
          - Email: support@filmkhabar.space
          - Website: https://filmkhabar.space
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/auto-link-proxy-v1.0.0.tar.gz
        asset_name: auto-link-proxy-v1.0.0.tar.gz
        asset_content_type: application/gzip 